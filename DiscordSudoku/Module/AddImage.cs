using Discord;
using Discord.Interactions;
using DiscordSudoku.Services;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace DiscordSudoku.Module
{
    public class AddImage : InteractionModuleBase<SocketInteractionContext>
    {

        public InteractionService Commands { get; set; }
        private CommandHandler _handler;

        public AddImage(CommandHandler handler)
        {
            _handler = handler;
        }

        
        [SlashCommand("sudoku", "Resolve my sudoku!")]
        public async Task Sudoku(IAttachment image)
        {

            if(image.Filename.EndsWith(".jpg") || image.Filename.EndsWith(".png") || image.Filename.EndsWith(".jpeg"))
            {
                string path = Path.Combine(Environment.CurrentDirectory, @"Assets\",  image.Filename);
                string res = Path.Combine(Environment.CurrentDirectory, @"Assets\", "result.jpeg");
                using (var client = new WebClient())
                {
                    client.DownloadFile(image.ProxyUrl, path);
                }
                await RespondWithFileAsync(path, image.Filename, "I will solve It!");
                run_cmd("/C cd " + Properties.Resources.PathToAI + " " + path + " " + res);



            }
            else
            {
                await RespondAsync("You didnt send an image!");

            }


        }

        public string run_cmd(string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "cmd.exe";
            start.Arguments = string.Format("\"{0}\"", cmd);
            start.Verb = "runas";
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = false; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    //string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd();
                    return result;
                }
            }
        }
    }
}
